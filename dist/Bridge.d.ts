/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface BridgeInterface extends ethers.utils.Interface {
  functions: {
    "dailyOutflowLimit()": FunctionFragment;
    "graceUserOutflow(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pauseBridge()": FunctionFragment;
    "paused()": FunctionFragment;
    "receiveForeign(uint256,address,uint256)": FunctionFragment;
    "receiveNative(uint256,address,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sendNative(uint256,uint256)": FunctionFragment;
    "sendWrapped(uint256,uint256)": FunctionFragment;
    "setOutflowLimit(uint256)": FunctionFragment;
    "threshold()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "txFees()": FunctionFragment;
    "unpauseBridge()": FunctionFragment;
    "vPAD()": FunctionFragment;
    "validateAddValidator(uint256,address)": FunctionFragment;
    "validateRemoveValidator(uint256,address)": FunctionFragment;
    "validateSetThreshold(uint256,uint16)": FunctionFragment;
    "validateUnpauseBridge(uint256)": FunctionFragment;
    "validateUpdateOwner(uint256,address)": FunctionFragment;
    "validateWithdrawFees(uint256)": FunctionFragment;
    "wToken()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "dailyOutflowLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "graceUserOutflow",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauseBridge",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "receiveForeign",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveNative",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendNative",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendWrapped",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOutflowLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "threshold", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "txFees", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unpauseBridge",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "vPAD", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "validateAddValidator",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "validateRemoveValidator",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "validateSetThreshold",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validateUnpauseBridge",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validateUpdateOwner",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "validateWithdrawFees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "wToken", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "dailyOutflowLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "graceUserOutflow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "receiveForeign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sendNative", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendWrapped",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOutflowLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "threshold", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "txFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unpauseBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vPAD", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validateAddValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateRemoveValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateSetThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateUnpauseBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateUpdateOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateWithdrawFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wToken", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "QuorumFailure(uint256)": EventFragment;
    "Transfer(uint256,uint256,uint256,address,uint256)": EventFragment;
    "Unfreeze(uint256,uint256,uint256,address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QuorumFailure"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unfreeze"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type QuorumFailureEvent = TypedEvent<
  [BigNumber] & { actionId: BigNumber }
>;

export type TransferEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string, BigNumber] & {
    actionId: BigNumber;
    chainId: BigNumber;
    txFees: BigNumber;
    to: string;
    value: BigNumber;
  }
>;

export type UnfreezeEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string, BigNumber] & {
    actionId: BigNumber;
    chainId: BigNumber;
    txFees: BigNumber;
    to: string;
    value: BigNumber;
  }
>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export class Bridge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BridgeInterface;

  functions: {
    dailyOutflowLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    graceUserOutflow(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pauseBridge(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    receiveForeign(
      actionId: BigNumberish,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    receiveNative(
      actionId: BigNumberish,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendNative(
      value: BigNumberish,
      chainId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendWrapped(
      value: BigNumberish,
      chainId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOutflowLimit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    threshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    txFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    unpauseBridge(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vPAD(overrides?: CallOverrides): Promise<[string]>;

    validateAddValidator(
      actionId: BigNumberish,
      newValidator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    validateRemoveValidator(
      actionId: BigNumberish,
      oldValidator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    validateSetThreshold(
      actionId: BigNumberish,
      newThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    validateUnpauseBridge(
      actionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    validateUpdateOwner(
      actionId: BigNumberish,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    validateWithdrawFees(
      actionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wToken(overrides?: CallOverrides): Promise<[string]>;
  };

  dailyOutflowLimit(overrides?: CallOverrides): Promise<BigNumber>;

  graceUserOutflow(
    user: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pauseBridge(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  receiveForeign(
    actionId: BigNumberish,
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  receiveNative(
    actionId: BigNumberish,
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendNative(
    value: BigNumberish,
    chainId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendWrapped(
    value: BigNumberish,
    chainId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOutflowLimit(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  threshold(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  txFees(overrides?: CallOverrides): Promise<BigNumber>;

  unpauseBridge(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vPAD(overrides?: CallOverrides): Promise<string>;

  validateAddValidator(
    actionId: BigNumberish,
    newValidator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  validateRemoveValidator(
    actionId: BigNumberish,
    oldValidator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  validateSetThreshold(
    actionId: BigNumberish,
    newThreshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  validateUnpauseBridge(
    actionId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  validateUpdateOwner(
    actionId: BigNumberish,
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  validateWithdrawFees(
    actionId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wToken(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    dailyOutflowLimit(overrides?: CallOverrides): Promise<BigNumber>;

    graceUserOutflow(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pauseBridge(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    receiveForeign(
      actionId: BigNumberish,
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    receiveNative(
      actionId: BigNumberish,
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sendNative(
      value: BigNumberish,
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sendWrapped(
      value: BigNumberish,
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOutflowLimit(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    threshold(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    txFees(overrides?: CallOverrides): Promise<BigNumber>;

    unpauseBridge(overrides?: CallOverrides): Promise<void>;

    vPAD(overrides?: CallOverrides): Promise<string>;

    validateAddValidator(
      actionId: BigNumberish,
      newValidator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    validateRemoveValidator(
      actionId: BigNumberish,
      oldValidator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    validateSetThreshold(
      actionId: BigNumberish,
      newThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    validateUnpauseBridge(
      actionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    validateUpdateOwner(
      actionId: BigNumberish,
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    validateWithdrawFees(
      actionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    wToken(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "QuorumFailure(uint256)"(
      actionId?: null
    ): TypedEventFilter<[BigNumber], { actionId: BigNumber }>;

    QuorumFailure(
      actionId?: null
    ): TypedEventFilter<[BigNumber], { actionId: BigNumber }>;

    "Transfer(uint256,uint256,uint256,address,uint256)"(
      actionId?: null,
      chainId?: null,
      txFees?: null,
      to?: null,
      value?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, string, BigNumber],
      {
        actionId: BigNumber;
        chainId: BigNumber;
        txFees: BigNumber;
        to: string;
        value: BigNumber;
      }
    >;

    Transfer(
      actionId?: null,
      chainId?: null,
      txFees?: null,
      to?: null,
      value?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, string, BigNumber],
      {
        actionId: BigNumber;
        chainId: BigNumber;
        txFees: BigNumber;
        to: string;
        value: BigNumber;
      }
    >;

    "Unfreeze(uint256,uint256,uint256,address,uint256)"(
      actionId?: null,
      chainId?: null,
      txFees?: null,
      to?: null,
      value?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, string, BigNumber],
      {
        actionId: BigNumber;
        chainId: BigNumber;
        txFees: BigNumber;
        to: string;
        value: BigNumber;
      }
    >;

    Unfreeze(
      actionId?: null,
      chainId?: null,
      txFees?: null,
      to?: null,
      value?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, string, BigNumber],
      {
        actionId: BigNumber;
        chainId: BigNumber;
        txFees: BigNumber;
        to: string;
        value: BigNumber;
      }
    >;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;
  };

  estimateGas: {
    dailyOutflowLimit(overrides?: CallOverrides): Promise<BigNumber>;

    graceUserOutflow(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pauseBridge(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    receiveForeign(
      actionId: BigNumberish,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    receiveNative(
      actionId: BigNumberish,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendNative(
      value: BigNumberish,
      chainId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendWrapped(
      value: BigNumberish,
      chainId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOutflowLimit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    threshold(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    txFees(overrides?: CallOverrides): Promise<BigNumber>;

    unpauseBridge(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vPAD(overrides?: CallOverrides): Promise<BigNumber>;

    validateAddValidator(
      actionId: BigNumberish,
      newValidator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    validateRemoveValidator(
      actionId: BigNumberish,
      oldValidator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    validateSetThreshold(
      actionId: BigNumberish,
      newThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    validateUnpauseBridge(
      actionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    validateUpdateOwner(
      actionId: BigNumberish,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    validateWithdrawFees(
      actionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wToken(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    dailyOutflowLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    graceUserOutflow(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauseBridge(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    receiveForeign(
      actionId: BigNumberish,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    receiveNative(
      actionId: BigNumberish,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendNative(
      value: BigNumberish,
      chainId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendWrapped(
      value: BigNumberish,
      chainId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOutflowLimit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    threshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    txFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpauseBridge(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vPAD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    validateAddValidator(
      actionId: BigNumberish,
      newValidator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    validateRemoveValidator(
      actionId: BigNumberish,
      oldValidator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    validateSetThreshold(
      actionId: BigNumberish,
      newThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    validateUnpauseBridge(
      actionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    validateUpdateOwner(
      actionId: BigNumberish,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    validateWithdrawFees(
      actionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
